###define Scalars
scalar GraphQLDate


###Top Level Declaration
type Query {
    about:String!,
    user:User!,
    issueList(status:IssueStatus,effortMin:Int,effortMax:Int,q:String,page:Int=1):IssuesListWithPages!,
    issueCounts(status:IssueStatus,effortMin:Int,effortMax:Int):[IssueCounts!]!,
    issue(id:Int!):Issue!
}
type Mutation {
    setAboutMessage(message:String!):SuccessMessage,
    issueAdd(issue:IssueInput!):NewItemAdded,
    issueUpdate(id:Int!,updates:IssueUpdateInput!):IssueUpdated!,
    issueDelete(id:Int!):Boolean!,
    issueRestore(id:Int!):Boolean!,
}
###Success Message Declaration for return type usage
type SuccessMessage {
    success:Boolean,
    message:String
}
###Issue Status Enumeration
enum IssueStatus {
    New,
    Assigned,
    Fixed,
    Closed
}
###Issue Declaration
type Issue {
    ###generated by mongodb database
    _id:ID!,
    id:Int!,
    title:String!,
    status:IssueStatus!,
    owner:String,
    effort:Int,
    createdAt:GraphQLDate!,
    due:GraphQLDate,
    description:String
}
###New Issue Input Declaration
"This type use for new issue definition"
input IssueInput {
    title:String!,
    owner:String,
    "Status is optional. The default value is New"
    status:IssueStatus=New,
    due:GraphQLDate,
    effort:Int,
    description:String
} 
###Returned Date After Issue Creation
type NewItemAdded {
    "This id generated by the server!"
    id:String!,
    success:Boolean,
    message:String
}
###Update Issue Input Declaration
"This type used for updating issue. All fields are optional"
input IssueUpdateInput {
    title:String,
    owner:String,
    status:IssueStatus,
    due:GraphQLDate,
    effort:Int,
    description:String
}
### Updated Issue Returned
type IssueUpdated {
    issue:Issue,
    success:Boolean,
    message:String
}
### Issues Counts for every owner-status combination
type IssueCounts {
    owner:String!,
    New:Int,
    Assigned:Int,
    Fixed:Int,
    Closed:Int
}
### return total counts or total pages for pagination purpose
type IssuesListWithPages {
    pages:Int,
    issues:[Issue!]!
}
###Signed In User
type User {
    signedIn:Boolean!,
    givenName:String,
    name:String,
    email:String,
}